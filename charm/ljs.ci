mainmodule miniMD {
  include "types.h";

  readonly CProxy_Main main_proxy;
  readonly CProxy_KokkosManager kokkos_proxy;
  readonly CProxy_Block block_proxy;
  readonly int num_chares;

  readonly std::string input_file;
  readonly int num_threads;
  readonly int teams;
  readonly int num_steps;
  readonly int system_size;
  readonly int nx;
  readonly int ny;
  readonly int nz;
  readonly int ntypes;
  readonly int neighbor_size;
  readonly int halfneigh;
  readonly int team_neigh;
  readonly int use_sse;
  readonly int check_safeexchange;
  readonly int do_safeexchange;
  readonly int sort;
  readonly int yaml_output;
  readonly int yaml_screen;
  readonly int ghost_newton;
  readonly int in_nx;
  readonly int in_ny;
  readonly int in_nz;
  readonly MMD_float in_t_request;
  readonly MMD_float in_rho;
  readonly int in_units;
  readonly ForceStyle in_forcetype;
  readonly MMD_float in_epsilon;
  readonly MMD_float in_sigma;
  readonly std::string in_datafile;
  readonly int in_ntimes;
  readonly MMD_float in_dt;
  readonly int in_neigh_every;
  readonly MMD_float in_force_cut;
  readonly MMD_float in_neigh_cut;
  readonly int in_thermo_nstat;

  mainchare Main {
    entry Main(CkArgMsg* m);
    entry [reductiontarget] void kokkosInitialized();
    entry [reductiontarget] void blocksCreated1(CkReductionMsg* msg);
    entry [reductiontarget] void blocksCreated2();
    entry [reductiontarget] void kokkosFinalized();

    entry void run() {
      when kokkosInitialized() serial {
        CkPrintf("Kokkos initialized!\n");

        // Create blocks
        block_proxy = CProxy_Block::ckNew(num_chares);
      }

      when blocksCreated1(CkReductionMsg* msg) serial {
        CkPrintf("blocksCreated1\n");
        double vxtot = 0;
        double vytot = 0;
        double vztot = 0;

        CkReduction::setElement* current = (CkReduction::setElement*)msg->getData();
        while (current != NULL) {
          double* result = (double*)&current->data;
          vxtot += result[0];
          vytot += result[1];
          vztot += result[2];
          current = current->next();
        }

        block_proxy.vtotReduced(vxtot, vytot, vztot);
      }

      when blocksCreated2() serial {
        CkPrintf("blocksCreated2\n");
        kokkos_proxy.finalize();
      }

      when kokkosFinalized() serial {
        CkPrintf("Kokkos finalized!\n");
        CkExit();
      }
    }
  };

  nodegroup KokkosManager {
    entry KokkosManager();
    entry void finalize();
  };

  array [1d] Block {
    entry Block();
    entry void vtotReduced(double vxtot, double vytot, double vztot);
  };
};
